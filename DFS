from collections import defaultdict


class Graph:
    def __init__(self):
        self.graph = defaultdict(list)


    def add_edge(self, vertex, neighbor):
        self.graph[vertex].append(neighbor)


    def dfs(self, start_vertex, visited):
        visited.add(start_vertex)
        print(start_vertex, end=" ")


        for neighbor in self.graph[start_vertex]:
            if neighbor not in visited:
                self.dfs(neighbor, visited)


if __name__ == "__main__":
    # Create a graph
    g = Graph()
    g.add_edge(0, 1)
    g.add_edge(0, 2)
    g.add_edge(1, 2)
    g.add_edge(2, 0)
    g.add_edge(2, 3)
    g.add_edge(3, 3)


    start_vertex = 2  # Starting vertex for DFS


    visited = set()


    print("Depth-First Traversal (starting from vertex", start_vertex, "):")
    g.dfs(start_vertex, visited)

