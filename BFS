from collections import defaultdict, deque


class Graph:
    def __init__(self):
        self.graph = defaultdict(list)


    def add_edge(self, vertex, neighbor):
        self.graph[vertex].append(neighbor)


    def bfs(self, start_vertex):
        visited = set()
        queue = deque()


        visited.add(start_vertex)
        queue.append(start_vertex)


        while queue:
            current_vertex = queue.popleft()
            print(current_vertex, end=" ")


            for neighbor in self.graph[current_vertex]:
                if neighbor not in visited:
                    visited.add(neighbor)
                    queue.append(neighbor)


if __name__ == "__main__":
    # Create a graph
    g = Graph()
    g.add_edge(0, 1)
    g.add_edge(0, 2)
    g.add_edge(1, 2)
    g.add_edge(2, 0)
    g.add_edge(2, 3)
    g.add_edge(3, 3)


    start_vertex = 2  # Starting vertex for BFS


    print("Breadth-First Traversal (starting from vertex", start_vertex, "):")
    g.bfs(start_vertex)

